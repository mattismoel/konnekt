# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Backend

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{github.repository }}-backend

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_call:
    inputs:
      skipTests:
        description: "Skip tests. Usefull when there is a dedicated CI job for tests"
        default: false
        required: false
        type: boolean

jobs:

  build: # Build and test Golang backend.
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    timeout-minutes: 5 # Max timeout duration for the build step.
    strategy:
      matrix:
        go: [ "stable", "oldstable" ]
        
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go }}
        check-latest: true
        
    - name: Format
      run: gofmt -s -w . && git diff --exit-code
      
    - name: Tidy
      run: go mod tidy && git diff --exit-code
      
    - name: Vet
      run: go vet ./...

    - name: Mod
      run: go mod download

    - name: Mod verfy
      run: go mod verify
      
    - name: Build
      run: go build -o /dev/null -v  ./...

    - name: Test
      if: ${{ !inputs.skipTests }}
      run: go test -v -count=1 -race -shuffle=on -coverprofile=coverage.txt ./...

    - name: Compile Tests
      if: ${{ inputs.skipTests }}
      run: go test -exec /bin/true ./...

    - name: Benchmark
      run: go test -v -shuffle=on -run=- -bench=. -benchtime=1x ./...
  
  dockerize: # Dockerize Golang backend and push it to GitHub Container Registry. 
    runs-on: ubuntu-latest
  
    defaults:
      run:
        working-directory: ./backend
        
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
