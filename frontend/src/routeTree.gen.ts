/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as EventsIndexImport } from './routes/events/index'
import { Route as ArtistsIndexImport } from './routes/artists/index'
import { Route as EventsEventIdImport } from './routes/events/$eventId'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as ArtistsArtistIdImport } from './routes/artists/$artistId'
import { Route as AdminDashboardImport } from './routes/admin/dashboard'
import { Route as AdminEventsEditImport } from './routes/admin/events/edit'
import { Route as AdminDashboardEventsImport } from './routes/admin/dashboard/events'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EventsIndexRoute = EventsIndexImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any)

const ArtistsIndexRoute = ArtistsIndexImport.update({
  id: '/artists/',
  path: '/artists/',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdRoute = EventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const ArtistsArtistIdRoute = ArtistsArtistIdImport.update({
  id: '/artists/$artistId',
  path: '/artists/$artistId',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AdminEventsEditRoute = AdminEventsEditImport.update({
  id: '/admin/events/edit',
  path: '/admin/events/edit',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardEventsRoute = AdminDashboardEventsImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => AdminDashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof rootRoute
    }
    '/artists/$artistId': {
      id: '/artists/$artistId'
      path: '/artists/$artistId'
      fullPath: '/artists/$artistId'
      preLoaderRoute: typeof ArtistsArtistIdImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdImport
      parentRoute: typeof rootRoute
    }
    '/artists/': {
      id: '/artists/'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof ArtistsIndexImport
      parentRoute: typeof rootRoute
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard/events': {
      id: '/admin/dashboard/events'
      path: '/events'
      fullPath: '/admin/dashboard/events'
      preLoaderRoute: typeof AdminDashboardEventsImport
      parentRoute: typeof AdminDashboardImport
    }
    '/admin/events/edit': {
      id: '/admin/events/edit'
      path: '/admin/events/edit'
      fullPath: '/admin/events/edit'
      preLoaderRoute: typeof AdminEventsEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AdminDashboardRouteChildren {
  AdminDashboardEventsRoute: typeof AdminDashboardEventsRoute
}

const AdminDashboardRouteChildren: AdminDashboardRouteChildren = {
  AdminDashboardEventsRoute: AdminDashboardEventsRoute,
}

const AdminDashboardRouteWithChildren = AdminDashboardRoute._addFileChildren(
  AdminDashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin/dashboard': typeof AdminDashboardRouteWithChildren
  '/artists/$artistId': typeof ArtistsArtistIdRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/artists': typeof ArtistsIndexRoute
  '/events': typeof EventsIndexRoute
  '/admin/dashboard/events': typeof AdminDashboardEventsRoute
  '/admin/events/edit': typeof AdminEventsEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin/dashboard': typeof AdminDashboardRouteWithChildren
  '/artists/$artistId': typeof ArtistsArtistIdRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/artists': typeof ArtistsIndexRoute
  '/events': typeof EventsIndexRoute
  '/admin/dashboard/events': typeof AdminDashboardEventsRoute
  '/admin/events/edit': typeof AdminEventsEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin/dashboard': typeof AdminDashboardRouteWithChildren
  '/artists/$artistId': typeof ArtistsArtistIdRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/artists/': typeof ArtistsIndexRoute
  '/events/': typeof EventsIndexRoute
  '/admin/dashboard/events': typeof AdminDashboardEventsRoute
  '/admin/events/edit': typeof AdminEventsEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/admin/dashboard'
    | '/artists/$artistId'
    | '/auth/login'
    | '/auth/register'
    | '/events/$eventId'
    | '/artists'
    | '/events'
    | '/admin/dashboard/events'
    | '/admin/events/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/admin/dashboard'
    | '/artists/$artistId'
    | '/auth/login'
    | '/auth/register'
    | '/events/$eventId'
    | '/artists'
    | '/events'
    | '/admin/dashboard/events'
    | '/admin/events/edit'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/admin/dashboard'
    | '/artists/$artistId'
    | '/auth/login'
    | '/auth/register'
    | '/events/$eventId'
    | '/artists/'
    | '/events/'
    | '/admin/dashboard/events'
    | '/admin/events/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdminDashboardRoute: typeof AdminDashboardRouteWithChildren
  ArtistsArtistIdRoute: typeof ArtistsArtistIdRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  EventsEventIdRoute: typeof EventsEventIdRoute
  ArtistsIndexRoute: typeof ArtistsIndexRoute
  EventsIndexRoute: typeof EventsIndexRoute
  AdminEventsEditRoute: typeof AdminEventsEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdminDashboardRoute: AdminDashboardRouteWithChildren,
  ArtistsArtistIdRoute: ArtistsArtistIdRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  EventsEventIdRoute: EventsEventIdRoute,
  ArtistsIndexRoute: ArtistsIndexRoute,
  EventsIndexRoute: EventsIndexRoute,
  AdminEventsEditRoute: AdminEventsEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/admin/dashboard",
        "/artists/$artistId",
        "/auth/login",
        "/auth/register",
        "/events/$eventId",
        "/artists/",
        "/events/",
        "/admin/events/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx",
      "children": [
        "/admin/dashboard/events"
      ]
    },
    "/artists/$artistId": {
      "filePath": "artists/$artistId.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx"
    },
    "/artists/": {
      "filePath": "artists/index.tsx"
    },
    "/events/": {
      "filePath": "events/index.tsx"
    },
    "/admin/dashboard/events": {
      "filePath": "admin/dashboard/events.tsx",
      "parent": "/admin/dashboard"
    },
    "/admin/events/edit": {
      "filePath": "admin/events/edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
